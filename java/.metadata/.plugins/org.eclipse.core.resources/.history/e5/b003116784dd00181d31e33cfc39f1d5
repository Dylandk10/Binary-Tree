import java.util.Stack;

public class BinaryTree {
	Node root;
	public BinaryTree() {
		this.root = null;
	}
	public void addNode(int value) {
		System.out.println("the value is: " + value);
		Node root = this.root;
		if(this.root == null) {
			this.root = new Node(value);
			System.out.println("head node; " + this.root.value);
			return;
		}
		
		Node currentRoot = root;
		while(true) {
			//node goes left 
			if(value < currentRoot.value) {
				if(currentRoot.left == null) {
				currentRoot = new Node(value);
				currentRoot.parent = currentRoot;
				System.out.println("the next left node " + value);
				break;
				} else {
					currentRoot = currentRoot.left;
				}
				//node goes right 
			} else if(value > currentRoot.value) {
				if(currentRoot.right == null) {
					currentRoot.right = new Node(value);
					currentRoot.parent = currentRoot;
					System.out.println("the next right node " + value);
					break;
				} else {
					currentRoot = currentRoot.right;
				}
				//node is equal and cannot be placed 
			} else {
				System.out.println("input equal and cannot be placed");
				break;
			}
		}
	}
	public Node getRoot() {
		return this.root;
	}
	
	//print the node.values in order 
	//warning can take null parameter 
	public void printInOrder(Node nextNode) {
		if(nextNode == null) {
			return;
		}
		Stack<Node> stack = new Stack<>();
		stack.push(nextNode);
		System.out.println("nextNode: " + nextNode.value);
		while(!stack.isEmpty()) {
			Node node = stack.pop();
			
			if(node.left != null) {
				stack.add(node.left);
			}
			if(node.right != null) {
				stack.add(node.right);
			}
			System.out.println(node.value);
			
		}
		
	}
}
